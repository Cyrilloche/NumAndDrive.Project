name: Deploy to Server

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Setup environment variables
      run: |
        echo "DB_SERVER=${{ secrets.DB_SERVER }}" >> $GITHUB_ENV
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
        echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
        echo "API_KEY=${{ secrets.API_KEY }}" >> $GITHUB_ENV

    - name: List files for debugging
      run: ls -R

    - name: Install dependencies
      run: sudo apt update && sudo apt install -y unzip jq

    - name: Install ngrok
      run: |
        wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
        tar -xvzf ngrok-v3-stable-linux-amd64.tgz
        sudo mv ngrok /usr/local/bin

    - name: Start ngrok tunnel
      id: ngrok
      run: ngrok tcp 22 --authtoken ${{ secrets.NGROK_AUTH_TOKEN }} & sleep 5

    - name: Get ngrok public URL
      id: get_ngrok_url
      run: |
        NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r .tunnels[0].public_url)
        echo "NGROK_URL=${NGROK_URL}" >> $GITHUB_ENV
        echo "NGROK_HOST=$(echo ${NGROK_URL} | sed 's/tcp:\/\///' | cut -d':' -f1)" >> $GITHUB_ENV
        echo "NGROK_PORT=$(echo ${NGROK_URL} | sed 's/tcp:\/\///' | cut -d':' -f2)" >> $GITHUB_ENV

    - name: Restore dependencies
      run: dotnet restore ./NumAndDrive/NumAndDrive.csproj

    - name: Build
      run: dotnet build --configuration Release --no-restore ./NumAndDrive/NumAndDrive.csproj

    - name: Publish
      run: dotnet publish --configuration Release --no-restore --output ./output ./NumAndDrive/NumAndDrive.csproj

    - name: List published files
      run: ls -R ./output

    - name: Deploy to Server
      uses: appleboy/scp-action@v0.1.0
      with:
        host: ${{ env.NGROK_HOST }}
        username: numanddrive
        key: ${{ secrets.SERVER_SSH_KEY }}
        source: "./output"
        target: "/var/www/numanddrive/publish"
        port: ${{ env.NGROK_PORT }}
        debug: true

    - name: Restart application
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.NGROK_HOST }}
        username: numanddrive
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ env.NGROK_PORT }}
        script: |
          sudo systemctl restart numanddrive

    - name: Print error logs
      if: failure()
      run: |
        echo "##[error] Build failed"
        find . -name "*.csproj"
        cat ./NumAndDrive/NumAndDrive.csproj
        dotnet --info
        dotnet build --configuration Release ./NumAndDrive/NumAndDrive.csproj -v diag
