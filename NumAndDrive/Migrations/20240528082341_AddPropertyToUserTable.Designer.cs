// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NumAndDrive.Database;

#nullable disable

namespace NumAndDrive.Migrations
{
    [DbContext(typeof(NumAndDriveContext))]
    [Migration("20240528082341_AddPropertyToUserTable")]
    partial class AddPropertyToUserTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.ActivationDay", b =>
                {
                    b.Property<int>("ActivationDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ActivationDayId"));

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ActivationDayId");

                    b.ToTable("activationday", (string)null);

                    b.HasData(
                        new
                        {
                            ActivationDayId = 1,
                            Day = "Lundi",
                            IsSelected = false
                        },
                        new
                        {
                            ActivationDayId = 2,
                            Day = "Mardi",
                            IsSelected = false
                        },
                        new
                        {
                            ActivationDayId = 3,
                            Day = "Mercredi",
                            IsSelected = false
                        },
                        new
                        {
                            ActivationDayId = 4,
                            Day = "Jeudi",
                            IsSelected = false
                        },
                        new
                        {
                            ActivationDayId = 5,
                            Day = "Vendredi",
                            IsSelected = false
                        },
                        new
                        {
                            ActivationDayId = 6,
                            Day = "Samedi",
                            IsSelected = false
                        },
                        new
                        {
                            ActivationDayId = 7,
                            Day = "Dimanche",
                            IsSelected = false
                        });
                });

            modelBuilder.Entity("NumAndDrive.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("AddressId");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar");

                    b.Property<int>("FuelId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar");

                    b.Property<string>("PaintColor")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar");

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("Registration")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("CarId");

                    b.HasIndex("UserId");

                    b.ToTable("car", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.Classroom", b =>
                {
                    b.Property<int>("ClassroomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClassroomId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("ClassroomId");

                    b.HasIndex("SchoolId");

                    b.ToTable("classroom", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.DriverType", b =>
                {
                    b.Property<int>("DriverTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DriverTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("DriverTypeId");

                    b.ToTable("drivertype", (string)null);

                    b.HasData(
                        new
                        {
                            DriverTypeId = 1,
                            Name = "Mamie au volant"
                        },
                        new
                        {
                            DriverTypeId = 2,
                            Name = "As du volant"
                        });
                });

            modelBuilder.Entity("NumAndDrive.Models.Filter", b =>
                {
                    b.Property<int>("FilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FilterId"));

                    b.Property<bool>("IsSelected")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("FilterId");

                    b.ToTable("filter", (string)null);

                    b.HasData(
                        new
                        {
                            FilterId = 1,
                            IsSelected = false,
                            Name = "Non-fumeur"
                        },
                        new
                        {
                            FilterId = 2,
                            IsSelected = false,
                            Name = "Annimaux acceptés"
                        });
                });

            modelBuilder.Entity("NumAndDrive.Models.Fuel", b =>
                {
                    b.Property<int>("FuelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FuelId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar");

                    b.HasKey("FuelId");

                    b.ToTable("fuel", (string)null);

                    b.HasData(
                        new
                        {
                            FuelId = 1,
                            Name = "Essence"
                        },
                        new
                        {
                            FuelId = 2,
                            Name = "Diesel"
                        },
                        new
                        {
                            FuelId = 3,
                            Name = "Hybride"
                        },
                        new
                        {
                            FuelId = 4,
                            Name = "Électrique"
                        });
                });

            modelBuilder.Entity("NumAndDrive.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReceiverUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SenderUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("SendingDate")
                        .HasColumnType("datetime");

                    b.HasKey("MessageId");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("message", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("NotificationId");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.Reservation", b =>
                {
                    b.Property<string>("PassengerUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TravelId")
                        .HasColumnType("int");

                    b.Property<bool>("Acceptation")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ResponseDate")
                        .HasColumnType("datetime");

                    b.HasKey("PassengerUserId", "TravelId");

                    b.HasIndex("TravelId");

                    b.ToTable("reservation", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.Reward", b =>
                {
                    b.Property<int>("RewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RewardId"));

                    b.Property<string>("IllustrationPath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RewardId");

                    b.ToTable("reward", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.School", b =>
                {
                    b.Property<int>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SchoolId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("SchoolId");

                    b.HasIndex("AddressId");

                    b.ToTable("school", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("StatusId");

                    b.ToTable("status", (string)null);

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            Name = "Étudiant"
                        },
                        new
                        {
                            StatusId = 2,
                            Name = "Intervenants"
                        },
                        new
                        {
                            StatusId = 3,
                            Name = "Professeur"
                        });
                });

            modelBuilder.Entity("NumAndDrive.Models.Travel", b =>
                {
                    b.Property<int>("TravelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TravelId"));

                    b.Property<TimeOnly>("ArrivalTime")
                        .HasColumnType("time(6)");

                    b.Property<sbyte>("AvailablePlace")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<TimeOnly>("DepartureTime")
                        .HasColumnType("time");

                    b.Property<int>("PersonnalAddressId")
                        .HasColumnType("int");

                    b.Property<string>("PublisherUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SchoolAddressId")
                        .HasColumnType("int");

                    b.HasKey("TravelId");

                    b.HasIndex("PersonnalAddressId");

                    b.HasIndex("PublisherUserId");

                    b.HasIndex("SchoolAddressId");

                    b.ToTable("travel", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.TravelActivationDay", b =>
                {
                    b.Property<int>("TravelId")
                        .HasColumnType("int");

                    b.Property<int>("ActivationDayId")
                        .HasColumnType("int");

                    b.HasKey("TravelId", "ActivationDayId");

                    b.HasIndex("ActivationDayId");

                    b.ToTable("travel_activationday", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.TravelFilter", b =>
                {
                    b.Property<int>("TravelId")
                        .HasColumnType("int");

                    b.Property<int>("FilterId")
                        .HasColumnType("int");

                    b.HasKey("TravelId", "FilterId");

                    b.HasIndex("FilterId");

                    b.ToTable("travel_filter", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.TravelPreference", b =>
                {
                    b.Property<int>("TravelPreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TravelPreferenceId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("TravelPreferenceId");

                    b.ToTable("travelpreference", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.TravelStopPoint", b =>
                {
                    b.Property<int>("CurrentTravelId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentAddressId")
                        .HasColumnType("int");

                    b.HasKey("CurrentTravelId", "CurrentAddressId");

                    b.HasIndex("CurrentAddressId");

                    b.ToTable("travel_stop", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<sbyte>("CountCreatedTravel")
                        .HasColumnType("tinyint");

                    b.Property<int?>("CurrentClassroomId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentDriverTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("FirstConnection")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentClassroomId");

                    b.HasIndex("CurrentDriverTypeId");

                    b.HasIndex("CurrentStatusId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b0bd20d-4f04-4d1e-821f-bb6618a07277",
                            CountCreatedTravel = (sbyte)0,
                            Email = "admin@admin-numanddrive.fr",
                            EmailConfirmed = true,
                            FirstConnection = false,
                            Firstname = "",
                            Lastname = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN-NUMANDDRIVE.FR",
                            NormalizedUserName = "ADMIN@ADMIN-NUMANDDRIVE.FR",
                            PasswordHash = "AQAAAAIAAYagAAAAEA+8z/L0wUMqi+sM2YpGxTHc4LlsI4yap+wUHM7aJ8Trhj40YnreMGuuiu6Dnb+F6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin-numanddrive.fr"
                        });
                });

            modelBuilder.Entity("NumAndDrive.Models.UserNotification", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("user_notification", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.UserReview", b =>
                {
                    b.Property<int>("UserReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserReviewId"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<sbyte>("Rating")
                        .HasColumnType("tinyint");

                    b.Property<string>("ReviewedUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ReviewerUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserReviewId");

                    b.HasIndex("ReviewedUserId");

                    b.HasIndex("ReviewerUserId");

                    b.ToTable("userreview", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.UserReward", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("RewardId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("WinOn")
                        .HasColumnType("date");

                    b.HasKey("UserId", "RewardId");

                    b.HasIndex("RewardId");

                    b.ToTable("user_reward", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.UserTravelPreference", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TravelPreferenceId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TravelPreferenceId");

                    b.HasIndex("TravelPreferenceId");

                    b.ToTable("user_travelpreference", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NumAndDrive.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NumAndDrive.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NumAndDrive.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NumAndDrive.Models.Car", b =>
                {
                    b.HasOne("NumAndDrive.Models.Fuel", "FuelCar")
                        .WithMany("Cars")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.User", "Owner")
                        .WithMany("Cars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuelCar");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NumAndDrive.Models.Classroom", b =>
                {
                    b.HasOne("NumAndDrive.Models.School", "School")
                        .WithMany("Classrooms")
                        .HasForeignKey("SchoolId");

                    b.Navigation("School");
                });

            modelBuilder.Entity("NumAndDrive.Models.Message", b =>
                {
                    b.HasOne("NumAndDrive.Models.User", "ReceiverUser")
                        .WithMany("IncomingMessage")
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.User", "SenderUser")
                        .WithMany("PostMessage")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceiverUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("NumAndDrive.Models.Reservation", b =>
                {
                    b.HasOne("NumAndDrive.Models.User", "PassengerUser")
                        .WithMany("Reservations")
                        .HasForeignKey("PassengerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.Travel", "Travel")
                        .WithMany("Reservations")
                        .HasForeignKey("TravelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PassengerUser");

                    b.Navigation("Travel");
                });

            modelBuilder.Entity("NumAndDrive.Models.School", b =>
                {
                    b.HasOne("NumAndDrive.Models.Address", "SchoolAddress")
                        .WithMany("Schools")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchoolAddress");
                });

            modelBuilder.Entity("NumAndDrive.Models.Travel", b =>
                {
                    b.HasOne("NumAndDrive.Models.Address", "PersonnalAdress")
                        .WithMany("DepartureTravel")
                        .HasForeignKey("PersonnalAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.User", "PublisherUser")
                        .WithMany("PublishedTravel")
                        .HasForeignKey("PublisherUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.Address", "SchoolAddress")
                        .WithMany("ArrivalTravel")
                        .HasForeignKey("SchoolAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonnalAdress");

                    b.Navigation("PublisherUser");

                    b.Navigation("SchoolAddress");
                });

            modelBuilder.Entity("NumAndDrive.Models.TravelActivationDay", b =>
                {
                    b.HasOne("NumAndDrive.Models.ActivationDay", "ActivationDay")
                        .WithMany("TravelActivationDays")
                        .HasForeignKey("ActivationDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.Travel", "Travel")
                        .WithMany("TravelActivationDays")
                        .HasForeignKey("TravelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivationDay");

                    b.Navigation("Travel");
                });

            modelBuilder.Entity("NumAndDrive.Models.TravelFilter", b =>
                {
                    b.HasOne("NumAndDrive.Models.Filter", "Filter")
                        .WithMany("TravelFilters")
                        .HasForeignKey("FilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.Travel", "Travel")
                        .WithMany("TravelFilters")
                        .HasForeignKey("TravelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filter");

                    b.Navigation("Travel");
                });

            modelBuilder.Entity("NumAndDrive.Models.TravelStopPoint", b =>
                {
                    b.HasOne("NumAndDrive.Models.Address", "CurrentAdress")
                        .WithMany("TravelStopPoints")
                        .HasForeignKey("CurrentAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.Travel", "CurrentTravel")
                        .WithMany("TravelStopPoints")
                        .HasForeignKey("CurrentTravelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentAdress");

                    b.Navigation("CurrentTravel");
                });

            modelBuilder.Entity("NumAndDrive.Models.User", b =>
                {
                    b.HasOne("NumAndDrive.Models.Classroom", "CurrentClassroom")
                        .WithMany("Users")
                        .HasForeignKey("CurrentClassroomId");

                    b.HasOne("NumAndDrive.Models.DriverType", "CurrentDriverType")
                        .WithMany("Users")
                        .HasForeignKey("CurrentDriverTypeId");

                    b.HasOne("NumAndDrive.Models.Status", "CurrentStatus")
                        .WithMany("Users")
                        .HasForeignKey("CurrentStatusId");

                    b.Navigation("CurrentClassroom");

                    b.Navigation("CurrentDriverType");

                    b.Navigation("CurrentStatus");
                });

            modelBuilder.Entity("NumAndDrive.Models.UserNotification", b =>
                {
                    b.HasOne("NumAndDrive.Models.Notification", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.User", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NumAndDrive.Models.UserReview", b =>
                {
                    b.HasOne("NumAndDrive.Models.User", "ReviewedUser")
                        .WithMany("ObtainedReviews")
                        .HasForeignKey("ReviewedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.User", "ReviewerUser")
                        .WithMany("SendingReviews")
                        .HasForeignKey("ReviewerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReviewedUser");

                    b.Navigation("ReviewerUser");
                });

            modelBuilder.Entity("NumAndDrive.Models.UserReward", b =>
                {
                    b.HasOne("NumAndDrive.Models.Reward", "Reward")
                        .WithMany("UserRewards")
                        .HasForeignKey("RewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.User", "User")
                        .WithMany("UserRewards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reward");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NumAndDrive.Models.UserTravelPreference", b =>
                {
                    b.HasOne("NumAndDrive.Models.TravelPreference", "TravelPreference")
                        .WithMany("UserTravelPreferences")
                        .HasForeignKey("TravelPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.User", "User")
                        .WithMany("UserTravelPreferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TravelPreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NumAndDrive.Models.ActivationDay", b =>
                {
                    b.Navigation("TravelActivationDays");
                });

            modelBuilder.Entity("NumAndDrive.Models.Address", b =>
                {
                    b.Navigation("ArrivalTravel");

                    b.Navigation("DepartureTravel");

                    b.Navigation("Schools");

                    b.Navigation("TravelStopPoints");
                });

            modelBuilder.Entity("NumAndDrive.Models.Classroom", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("NumAndDrive.Models.DriverType", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("NumAndDrive.Models.Filter", b =>
                {
                    b.Navigation("TravelFilters");
                });

            modelBuilder.Entity("NumAndDrive.Models.Fuel", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("NumAndDrive.Models.Notification", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("NumAndDrive.Models.Reward", b =>
                {
                    b.Navigation("UserRewards");
                });

            modelBuilder.Entity("NumAndDrive.Models.School", b =>
                {
                    b.Navigation("Classrooms");
                });

            modelBuilder.Entity("NumAndDrive.Models.Status", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("NumAndDrive.Models.Travel", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("TravelActivationDays");

                    b.Navigation("TravelFilters");

                    b.Navigation("TravelStopPoints");
                });

            modelBuilder.Entity("NumAndDrive.Models.TravelPreference", b =>
                {
                    b.Navigation("UserTravelPreferences");
                });

            modelBuilder.Entity("NumAndDrive.Models.User", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("IncomingMessage");

                    b.Navigation("ObtainedReviews");

                    b.Navigation("PostMessage");

                    b.Navigation("PublishedTravel");

                    b.Navigation("Reservations");

                    b.Navigation("SendingReviews");

                    b.Navigation("UserNotifications");

                    b.Navigation("UserRewards");

                    b.Navigation("UserTravelPreferences");
                });
#pragma warning restore 612, 618
        }
    }
}
